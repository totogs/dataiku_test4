{
  "projectKey": "LOGSANALYSIS",
  "id": "GENERATE_DATA",
  "type": "step_based",
  "name": "generate_data",
  "active": false,
  "versionTag": {
    "versionNumber": 25,
    "lastModifiedBy": {
      "login": "tony"
    },
    "lastModifiedOn": 1630418089240
  },
  "checklists": {
    "checklists": []
  },
  "delayedTriggersBehavior": {
    "delayWhileRunning": true,
    "squashDelayedTriggers": true,
    "suppressTriggersWhileRunning": true
  },
  "tags": [],
  "triggers": [
    {
      "id": "SUYcaRl3",
      "type": "temporal",
      "name": "Time-based",
      "delay": 5,
      "active": true,
      "params": {
        "repeatFrequency": 150,
        "frequency": "Minutely",
        "startingFrom": "2021-08-31T12:40:00.000Z",
        "daysOfWeek": [
          "Tuesday"
        ],
        "minute": 40,
        "hour": 14,
        "timezone": "SERVER"
      }
    }
  ],
  "reporters": [
    {
      "active": true,
      "messaging": {
        "type": "slack-scenario",
        "configuration": {
          "message": "DSS Scenario \u003c${scenarioRunURL}|${scenarioName}\u003e triggered by ${triggerName} : ${outcome} ${if(outcome \u003d\u003d \u0027SUCCESS\u0027, \u0027:white_check_mark:\u0027, \u0027\u0027)}${if(outcome \u003d\u003d \u0027FAILED\u0027, \u0027:red_circle:\u0027, \u0027\u0027)}${if(outcome \u003d\u003d \u0027WARNING\u0027, \u0027:red_circle:\u0027, \u0027\u0027)}${if(outcome \u003d\u003d \u0027\u0027 || outcome \u003d\u003d \u0027N/A\u0027, \u0027:bell:\u0027, \u0027\u0027)}",
          "messageMode": "TEXT_MESSAGE",
          "blocks": "[\n    {\n        \"type\": \"section\",\n        \"text\": {\n            \"type\": \"mrkdwn\",\n            \"text\": \"*DSS Scenario \u003c${scenarioRunURL}|${scenarioName}\u003e:* ${outcome} ${if(outcome \u003d\u003d \u0027SUCCESS\u0027, \u0027:white_check_mark:\u0027, \u0027\u0027)}${if(outcome \u003d\u003d \u0027FAILED\u0027, \u0027:red_circle:\u0027, \u0027\u0027)}${if(outcome \u003d\u003d \u0027WARNING\u0027, \u0027:red_circle:\u0027, \u0027\u0027)}${if(outcome \u003d\u003d \u0027\u0027 || outcome \u003d\u003d \u0027N/A\u0027, \u0027:bell:\u0027, \u0027\u0027)}\"\n        }\n    },\n    {\n        \"type\": \"context\",\n        \"elements\": [\n            {\n                \"type\": \"mrkdwn\",\n                \"text\": \"Triggered by ${triggerName}\"\n            }\n        ]\n    }\n]\n",
          "mode": "WEBHOOK",
          "useProxy": true,
          "asUser": false,
          "linkNames": false
        }
      },
      "id": "w8FTvW7d",
      "runConditionEnabled": true,
      "runCondition": "outcome !\u003d \u0027SUCCESS\u0027",
      "phase": "END"
    }
  ],
  "params": {
    "steps": [
      {
        "id": "custom_python_ppdP0jbiFzyIFeLNyM8/fg",
        "type": "custom_python",
        "name": "generate data",
        "runConditionType": "RUN_IF_STATUS_MATCH",
        "runConditionStatuses": [
          "SUCCESS",
          "WARNING"
        ],
        "runConditionExpression": "",
        "resetScenarioStatus": false,
        "delayBetweenRetries": 10,
        "maxRetriesOnFail": 0,
        "params": {
          "script": "# -------------------------------------------------------------------------------- NOTEBOOK-CELL: CODE\n# -*- coding: utf-8 -*-\nimport dataiku\nimport pandas as pd, numpy as np\nfrom dataiku import pandasutils as pdu\n\n\nnew_data \u003d dataiku.Dataset(\"new_data\")\ndf_new_data \u003d new_data.get_dataframe()\n\n\ndata \u003d dataiku.Dataset(\"data_distinct\")\ndf_data \u003d data.get_dataframe()\n\n# -------------------------------------------------------------------------------- NOTEBOOK-CELL: CODE\nfrom datetime import timedelta\nfrom datetime import datetime\nimport random\n\n# -------------------------------------------------------------------------------- NOTEBOOK-CELL: CODE\nmax_index \u003d len(df_data)-10\nrandom_index \u003d random.randint(0,max_index)\n\n# -------------------------------------------------------------------------------- NOTEBOOK-CELL: CODE\ndf_generated \u003d df_data[random_index:random_index+10]\n\n# -------------------------------------------------------------------------------- NOTEBOOK-CELL: CODE\nactualdate \u003d df_new_data[\"date\"].max()\nlistdate \u003d []\nfor i in range(len(df_generated)):\n    actualdate \u003d actualdate + timedelta(minutes\u003d15)\n    listdate.append(actualdate)\n\n# -------------------------------------------------------------------------------- NOTEBOOK-CELL: CODE\nlistdate.reverse()\ndf_generated[\"date\"] \u003d listdate\n\n# -------------------------------------------------------------------------------- NOTEBOOK-CELL: CODE\ndf_generated\n\n# -------------------------------------------------------------------------------- NOTEBOOK-CELL: CODE\n# Compute recipe outputs\n# TODO: Write here your actual code that computes the outputs\n# NB: DSS supports several kinds of APIs for reading and writing data. Please see doc.\n\ndf_new_data \u003d df_new_data.append(df_generated)\nnew_data.write_with_schema(df_new_data)\n\n\n# Write recipe outputs\ndata_generated \u003d dataiku.Dataset(\"data_generated\")\ndata_generated.write_with_schema(df_generated)",
          "envSelection": {
            "envMode": "INHERIT"
          },
          "proceedOnFailure": false
        }
      }
    ]
  },
  "automationLocal": false,
  "customFields": {}
}